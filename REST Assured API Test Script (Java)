Project Structure
ecommerce-platform-automation-testing/
├── src/
│   └── test/
│       ├── java/
│       │   └── com/
│       │       └── ecommerce/
│       │           └── api/
│       │               └── OrderApiTest.java
├── pom.xml
└── README.md
pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://www.apache.org/POM/4.0.0">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.ecommerce</groupId>
    <artifactId>ecommerce-platform-automation-testing</artifactId>
    <version>1.0-SNAPSHOT</version>
    <dependencies>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>4.3.3</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.2</version>
            </plugin>
        </plugins>
    </build>
</project>
OrderApiTest.java
package com.ecommerce.api;

import io.restassured.RestAssured;
import io.restassured.response.Response;

import org.junit.BeforeClass;
import org.junit.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;

public class OrderApiTest {

    @BeforeClass
    public static void setup() {
        RestAssured.baseURI = "http://ecommerce-platform.com/api";
    }

    @Test
    public void testCreateOrder() {
        String requestBody = "{ \"productId\": 123, \"quantity\": 2 }";

        given()
            .header("Content-Type", "application/json")
            .body(requestBody)
        .when()
            .post("/orders")
        .then()
            .statusCode(201)
            .body("message", equalTo("Order created successfully"));
    }

    @Test
    public void testGetOrder() {
        int orderId = 1;

        given()
            .pathParam("orderId", orderId)
        .when()
            .get("/orders/{orderId}")
        .then()
            .statusCode(200)
            .body("orderId", equalTo(orderId));
    }
}
